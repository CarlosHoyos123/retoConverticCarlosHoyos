{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthServicio {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this._authenticated = false;\n    this.url = 'Auth/';\n    /** Propiedad configuración */\n    this.configSession = 'Usuario';\n  }\n  Login(login) {\n    let body = JSON.stringify(login);\n    const url = `${this.url}user`;\n    return this._http.post(url, body);\n  }\n  formsInfo() {\n    const url = `${this.url}formConfig`;\n    return this._http.get(url);\n  }\n  createUser(newUser) {\n    let body = JSON.stringify(newUser);\n    const url = `${this.url}create`;\n    return this._http.post(url, body);\n  }\n  cerrarSesion() {\n    localStorage.removeItem(this.configSession);\n    return of(true);\n  }\n  set session(auth) {\n    console.log(\"En guardar respuesta\");\n    localStorage.setItem(this.configSession, JSON.stringify(auth));\n  }\n  get session() {\n    console.log(\"revisando session\");\n    if (localStorage.getItem(this.configSession) === undefined) {\n      console.log(\"yendo a login\");\n      this._router.navigate(['Auth/login']);\n    }\n    const sessionJson = localStorage.getItem(this.configSession);\n    const session = sessionJson !== null ? JSON.parse(sessionJson) : null;\n    return session;\n  }\n}\nAuthServicio.ɵfac = function AuthServicio_Factory(t) {\n  return new (t || AuthServicio)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthServicio.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServicio,\n  factory: AuthServicio.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAmB,MAAM;;;;AAchD,OAAM,MAAOC,YAAY;EAUrBC,YACYC,KAAiB,EACjBC,OAAe;IADf,UAAK,GAALD,KAAK;IACL,YAAO,GAAPC,OAAO;IAVX,mBAAc,GAAY,KAAK;IAE/B,QAAG,GAAW,OAAO;IAE7B;IACQ,kBAAa,GAAW,SAAS;EAMzC;EAEAC,KAAK,CAACC,KAAY;IACd,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;IAChC,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,MAAM;IAC7B,OAAO,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAMD,GAAG,EAAEH,IAAI,CAAC;EAC1C;EAEAK,SAAS;IACL,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,YAAY;IACnC,OAAO,IAAI,CAACP,KAAK,CAACU,GAAG,CAAaH,GAAG,CAAC;EAC1C;EAEAI,UAAU,CAACC,OAAqB;IAC5B,IAAIR,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACM,OAAO,CAAC;IAClC,MAAML,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,QAAQ;IAC/B,OAAO,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAeD,GAAG,EAAEH,IAAI,CAAC;EACnD;EAEAS,YAAY;IAERC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACC,aAAa,CAAC;IAC3C,OAAOnB,EAAE,CAAC,IAAI,CAAC;EACnB;EAEA,IAAIoB,OAAO,CAACC,IAAkB;IAC1BC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCN,YAAY,CAACO,OAAO,CAAC,IAAI,CAACL,aAAa,EAAEX,IAAI,CAACC,SAAS,CAACY,IAAI,CAAC,CAAC;EAClE;EAEA,IAAID,OAAO;IACPE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChC,IAAIN,YAAY,CAACQ,OAAO,CAAC,IAAI,CAACN,aAAa,CAAC,KAAKO,SAAS,EAAE;MACxDJ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAI,CAACnB,OAAO,CAACuB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;IAEzC,MAAMC,WAAW,GAAGX,YAAY,CAACQ,OAAO,CAAC,IAAI,CAACN,aAAa,CAAC;IAC5D,MAAMC,OAAO,GAAiBQ,WAAW,KAAK,IAAI,GAAGpB,IAAI,CAACqB,KAAK,CAACD,WAAW,CAAC,GAAG,IAAI;IACnF,OAAOR,OAAO;EAClB;;AApDSnB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA6B,SAAZ7B,YAAY;EAAA8B,YAHT;AAAM","names":["of","AuthServicio","constructor","_http","_router","Login","login","body","JSON","stringify","url","post","formsInfo","get","createUser","newUser","cerrarSesion","localStorage","removeItem","configSession","session","auth","console","log","setItem","getItem","undefined","navigate","sessionJson","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\chrod\\OneDrive\\Documentos\\Repositorios\\FrontEcommerce\\src\\app\\servicios\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\n\r\n/** Interfaces */\r\nimport { Login } from '../interface/login';\r\nimport { RespuestaApi } from '../interface/respuestaapi';\r\nimport { environment } from 'src/environments/environment';\r\nimport { FormConfig } from '../interface/formsConfig';\r\nimport { ClientEntity } from '../interface/clientEntity';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class AuthServicio {\r\n\r\n    private _authenticated: boolean = false;\r\n\r\n    private url: string = 'Auth/';\r\n\r\n    /** Propiedad configuración */\r\n    private configSession: string = 'Usuario';\r\n\r\n\r\n    constructor(\r\n        private _http: HttpClient,\r\n        private _router: Router) {\r\n    }\r\n\r\n    Login(login: Login): Observable<any> {\r\n        let body = JSON.stringify(login);\r\n        const url = `${this.url}user`;\r\n        return this._http.post<any>(url, body)\r\n    }\r\n\r\n    formsInfo(){\r\n        const url = `${this.url}formConfig`;\r\n        return this._http.get<FormConfig>(url)\r\n    }\r\n\r\n    createUser(newUser: ClientEntity){\r\n        let body = JSON.stringify(newUser);\r\n        const url = `${this.url}create`;\r\n        return this._http.post<ClientEntity>(url, body)\r\n    }\r\n\r\n    cerrarSesion()\r\n    {\r\n        localStorage.removeItem(this.configSession);\r\n        return of(true);\r\n    }\r\n\r\n    set session(auth: RespuestaApi) {\r\n        console.log(\"En guardar respuesta\")\r\n        localStorage.setItem(this.configSession, JSON.stringify(auth));\r\n    }\r\n\r\n    get session(): RespuestaApi {\r\n        console.log(\"revisando session\");\r\n        if (localStorage.getItem(this.configSession) === undefined) {\r\n            console.log(\"yendo a login\");\r\n            this._router.navigate(['Auth/login']);\r\n        }\r\n        const sessionJson = localStorage.getItem(this.configSession);\r\n        const session: RespuestaApi = sessionJson !== null ? JSON.parse(sessionJson) : null;\r\n        return session;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}