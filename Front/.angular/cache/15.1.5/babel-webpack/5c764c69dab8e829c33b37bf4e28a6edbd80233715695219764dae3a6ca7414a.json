{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n// Parametros\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../auth.service\";\nexport class Interceptor {\n  /** Constructor */\n  constructor(_authService, injector) {\n    this._authService = _authService;\n    this.injector = injector;\n    this.isRefreshing = false;\n    this.refreshTokenSubject = new BehaviorSubject(null);\n  }\n  /** Intercept\r\n   * @param req\r\n   * @param next */\n  intercept(req, next) {\n    let headers;\n    //Valida si son los JSON\n    if (req.url.includes('.json')) {\n      headers = req.clone({\n        setHeaders: {\n          'content-type': 'application/json',\n          'Access-Control-Allow-Headers': 'Content-Type',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'\n        }\n      });\n      return next.handle(headers);\n    }\n    //Valida si son los  assets\n    if (req.url.includes('assets')) {\n      // Response\n      return next.handle(req).pipe(catchError(error => throwError(error)));\n    }\n    req.url = environment.url + '/' + req.url;\n    const uploadFile = req.url.toLowerCase().includes('upload');\n    if (this._authService.session) {\n      const contentType = !uploadFile ? {\n        'content-type': 'application/json'\n      } : {};\n      headers = req.clone({\n        setHeaders: {\n          'Authorization': 'Bearer ' + this._authService.token,\n          ...contentType\n        }\n      });\n    } else {\n      if (!uploadFile) {\n        headers = req.clone({\n          setHeaders: {\n            'content-type': 'application/json'\n          }\n        });\n      } else {\n        headers = req.clone();\n      }\n    }\n    // Response\n    return next.handle(headers).pipe(catchError(error => {\n      return throwError(error);\n    }));\n  }\n}\nInterceptor.ɵfac = function Interceptor_Factory(t) {\n  return new (t || Interceptor)(i0.ɵɵinject(i1.AuthServicio), i0.ɵɵinject(i0.Injector));\n};\nInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Interceptor,\n  factory: Interceptor.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,QAAQ,MAAM;AAC9D,SAASC,UAAU,QAAiC,gBAAgB;AAKpE;AACA,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,OAAM,MAAOC,WAAW;EAIpB;EACAC,YACYC,YAA0B,EAC1BC,QAAkB;IADlB,iBAAY,GAAZD,YAAY;IACZ,aAAQ,GAARC,QAAQ;IANZ,iBAAY,GAAG,KAAK;IACpB,wBAAmB,GAAyB,IAAIP,eAAe,CAAM,IAAI,CAAC;EAKhD;EAElC;;;EAGAQ,SAAS,CAACC,GAAQ,EAAEC,IAAiB;IAEjC,IAAIC,OAAY;IAEhB;IACA,IAAIF,GAAG,CAACG,GAAG,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC3BF,OAAO,GAAGF,GAAG,CAACK,KAAK,CAAC;QAChBC,UAAU,EAAE;UACR,cAAc,EAAE,kBAAkB;UAClC,8BAA8B,EAAE,cAAc;UAC9C,8BAA8B,EAAE;;OAEvC,CAAC;MACF,OAAOL,IAAI,CAACM,MAAM,CAACL,OAAO,CAAC;;IAG/B;IACA,IAAIF,GAAG,CAACG,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAC5B;MACA,OAAOH,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC,CAACQ,IAAI,CACxBf,UAAU,CAACgB,KAAK,IAAIjB,UAAU,CAACiB,KAAK,CAAC,CAAC,CACzC;;IAGLT,GAAG,CAACG,GAAG,GAAGT,WAAW,CAACS,GAAG,GAAG,GAAG,GAAGH,GAAG,CAACG,GAAG;IAEzC,MAAMO,UAAU,GAAGV,GAAG,CAACG,GAAG,CAACQ,WAAW,EAAE,CAACP,QAAQ,CAAC,QAAQ,CAAC;IAE3D,IAAI,IAAI,CAACP,YAAY,CAACe,OAAO,EAAE;MAC3B,MAAMC,WAAW,GAAG,CAACH,UAAU,GAAG;QAAE,cAAc,EAAE;MAAkB,CAAE,GAAG,EAAE;MAC7ER,OAAO,GAAGF,GAAG,CAACK,KAAK,CAAC;QAAEC,UAAU,EAAE;UAAE,eAAe,EAAE,SAAS,GAAG,IAAI,CAACT,YAAY,CAACiB,KAAK;UAAE,GAAGD;QAAW;MAAG,CAAE,CAAC;KACjH,MAAM;MACH,IAAI,CAACH,UAAU,EAAE;QAAER,OAAO,GAAGF,GAAG,CAACK,KAAK,CAAC;UAAEC,UAAU,EAAE;YAAE,cAAc,EAAE;UAAkB;QAAE,CAAE,CAAC;OAAG,MAC5F;QAAEJ,OAAO,GAAGF,GAAG,CAACK,KAAK,EAAE;;;IAGhC;IACA,OAAOJ,IAAI,CAACM,MAAM,CAACL,OAAO,CAAC,CAACM,IAAI,CAC5Bf,UAAU,CAAEgB,KAAK,IAAI;MACjB,OAAOjB,UAAU,CAACiB,KAAK,CAAC;IAC5B,CAAC,CAAC,CACL;EACL;;AAtDSd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;AAAA","names":["BehaviorSubject","throwError","catchError","environment","Interceptor","constructor","_authService","injector","intercept","req","next","headers","url","includes","clone","setHeaders","handle","pipe","error","uploadFile","toLowerCase","session","contentType","token","factory"],"sourceRoot":"","sources":["C:\\Users\\chrod\\OneDrive\\Documentos\\RepositoriosConvertic\\reto\\Angular\\FrontEcommerce\\src\\app\\servicios\\base\\inteceptor.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, switchMap, filter, take } from 'rxjs/operators';\r\n\r\n/** Servicios */\r\nimport { AuthServicio } from './../auth.service';\r\n\r\n// Parametros\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable()\r\nexport class Interceptor implements HttpInterceptor {\r\n    private isRefreshing = false;\r\n    private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n    /** Constructor */\r\n    constructor(\r\n        private _authService: AuthServicio,\r\n        private injector: Injector) { }\r\n\r\n    /** Intercept\r\n     * @param req\r\n     * @param next */\r\n    intercept(req: any, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        let headers: any;\r\n\r\n        //Valida si son los JSON\r\n        if (req.url.includes('.json')) {\r\n            headers = req.clone({\r\n                setHeaders: {\r\n                    'content-type': 'application/json',\r\n                    'Access-Control-Allow-Headers': 'Content-Type',\r\n                    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n                }\r\n            });\r\n            return next.handle(headers);\r\n        }\r\n\r\n        //Valida si son los  assets\r\n        if (req.url.includes('assets')) {\r\n            // Response\r\n            return next.handle(req).pipe(\r\n                catchError(error => throwError(error))\r\n            );\r\n        }\r\n\r\n        req.url = environment.url + '/' + req.url;\r\n\r\n        const uploadFile = req.url.toLowerCase().includes('upload');\r\n\r\n        if (this._authService.session) {\r\n            const contentType = !uploadFile ? { 'content-type': 'application/json' } : {};\r\n            headers = req.clone({ setHeaders: { 'Authorization': 'Bearer ' + this._authService.token, ...contentType, } });\r\n        } else {\r\n            if (!uploadFile) { headers = req.clone({ setHeaders: { 'content-type': 'application/json' } }); }\r\n            else { headers = req.clone(); }\r\n        }\r\n\r\n        // Response\r\n        return next.handle(headers).pipe(\r\n            catchError((error) => {\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}