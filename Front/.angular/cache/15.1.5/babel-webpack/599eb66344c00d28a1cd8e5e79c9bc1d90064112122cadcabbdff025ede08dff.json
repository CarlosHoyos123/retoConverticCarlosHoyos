{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthServicio {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this._authenticated = false;\n    this.url = 'Auth/';\n    /** Propiedad configuración */\n    this.configSession = 'Usuario';\n    this.configForms = 'Formularies';\n  }\n  Login(login) {\n    let body = JSON.stringify(login);\n    const url = `${this.url}user`;\n    return this._http.post(url, body);\n  }\n  formsInfo() {\n    const url = `${this.url}formConfig`;\n    return this._http.get(url);\n  }\n  createUser(newUser) {\n    let body = JSON.stringify(newUser);\n    const url = `${this.url}create`;\n    return this._http.post(url, body);\n  }\n  updateUser(User) {\n    let body = JSON.stringify(User);\n    const url = `${this.url}update`;\n    return this._http.post(url, body);\n  }\n  cerrarSesion() {\n    localStorage.removeItem(this.configSession);\n    localStorage.removeItem(this.configForms);\n    return of(true);\n  }\n  set session(auth) {\n    localStorage.setItem(this.configSession, JSON.stringify(auth));\n  }\n  set FormsData(data) {\n    localStorage.setItem(this.configForms, JSON.stringify(data));\n  }\n  get FormsData() {\n    const formsJson = localStorage.getItem(this.configForms);\n    const session = formsJson !== null ? JSON.parse(formsJson) : null;\n    return session;\n  }\n  get session() {\n    if (localStorage.getItem(this.configSession) === null) {\n      this._router.navigate(['']);\n    }\n    const sessionJson = localStorage.getItem(this.configSession);\n    const session = sessionJson !== null ? JSON.parse(sessionJson) : null;\n    return session;\n  }\n}\nAuthServicio.ɵfac = function AuthServicio_Factory(t) {\n  return new (t || AuthServicio)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthServicio.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServicio,\n  factory: AuthServicio.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAS,MAAM;;;;AAetC,OAAM,MAAOC,YAAY;EAWrBC,YACYC,KAAiB,EACjBC,OAAe;IADf,UAAK,GAALD,KAAK;IACL,YAAO,GAAPC,OAAO;IAXX,mBAAc,GAAY,KAAK;IAE/B,QAAG,GAAW,OAAO;IAE7B;IACQ,kBAAa,GAAW,SAAS;IACjC,gBAAW,GAAW,aAAa;EAM3C;EAEAC,KAAK,CAACC,KAAY;IACd,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;IAChC,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,MAAM;IAC7B,OAAO,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAeD,GAAG,EAAEH,IAAI,CAAC;EACnD;EAEAK,SAAS;IACL,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,YAAY;IACnC,OAAO,IAAI,CAACP,KAAK,CAACU,GAAG,CAAaH,GAAG,CAAC;EAC1C;EAEAI,UAAU,CAACC,OAAqB;IAC5B,IAAIR,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACM,OAAO,CAAC;IAClC,MAAML,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,QAAQ;IAC/B,OAAO,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAuBD,GAAG,EAAEH,IAAI,CAAC;EAC3D;EAEAS,UAAU,CAACC,IAAkB;IACzB,IAAIV,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACQ,IAAI,CAAC;IAC/B,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,QAAQ;IAC/B,OAAO,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAeD,GAAG,EAAEH,IAAI,CAAC;EACnD;EAEAW,YAAY;IAERC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACC,aAAa,CAAC;IAC3CF,YAAY,CAACC,UAAU,CAAC,IAAI,CAACE,WAAW,CAAC;IACzC,OAAOtB,EAAE,CAAC,IAAI,CAAC;EACnB;EAEA,IAAIuB,OAAO,CAACC,IAAkB;IAC1BL,YAAY,CAACM,OAAO,CAAC,IAAI,CAACJ,aAAa,EAAEb,IAAI,CAACC,SAAS,CAACe,IAAI,CAAC,CAAC;EAClE;EAEA,IAAIE,SAAS,CAACC,IAAgB;IAC1BR,YAAY,CAACM,OAAO,CAAC,IAAI,CAACH,WAAW,EAAEd,IAAI,CAACC,SAAS,CAACkB,IAAI,CAAC,CAAC;EAChE;EAEA,IAAID,SAAS;IACT,MAAME,SAAS,GAAGT,YAAY,CAACU,OAAO,CAAC,IAAI,CAACP,WAAW,CAAC;IACxD,MAAMC,OAAO,GAAeK,SAAS,KAAK,IAAI,GAAGpB,IAAI,CAACsB,KAAK,CAACF,SAAS,CAAC,GAAG,IAAI;IAC7E,OAAOL,OAAO;EAElB;EAEA,IAAIA,OAAO;IACP,IAAIJ,YAAY,CAACU,OAAO,CAAC,IAAI,CAACR,aAAa,CAAC,KAAK,IAAI,EAAE;MACnD,IAAI,CAACjB,OAAO,CAAC2B,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;IAE/B,MAAMC,WAAW,GAAGb,YAAY,CAACU,OAAO,CAAC,IAAI,CAACR,aAAa,CAAC;IAC5D,MAAME,OAAO,GAAiBS,WAAW,KAAK,IAAI,GAAGxB,IAAI,CAACsB,KAAK,CAACE,WAAW,CAAC,GAAG,IAAI;IACnF,OAAOT,OAAO;EAClB;;AApEStB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgC,SAAZhC,YAAY;EAAAiC,YAHT;AAAM","names":["of","AuthServicio","constructor","_http","_router","Login","login","body","JSON","stringify","url","post","formsInfo","get","createUser","newUser","updateUser","User","cerrarSesion","localStorage","removeItem","configSession","configForms","session","auth","setItem","FormsData","data","formsJson","getItem","parse","navigate","sessionJson","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hilda\\OneDrive\\Documentos\\Convertic\\retoConverticCarlosHoyos\\Front\\src\\app\\servicios\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient  } from '@angular/common/http';\r\nimport { Observable, of  } from 'rxjs';\r\n\r\n/** Interfaces */\r\nimport { Login } from '../interface/login';\r\nimport { RespuestaApi } from '../interface/respuestaapi';\r\nimport { FormConfig } from '../interface/formsConfig';\r\nimport { ClientEntity } from '../interface/clientEntity';\r\nimport { Router } from '@angular/router';\r\nimport { ClientUpdate } from '../interface/clientUpdate';\r\nimport { UserCreationResponse } from '../interface/userCreationResponse';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class AuthServicio {\r\n\r\n    private _authenticated: boolean = false;\r\n\r\n    private url: string = 'Auth/';\r\n\r\n    /** Propiedad configuración */\r\n    private configSession: string = 'Usuario';\r\n    private configForms: string = 'Formularies';\r\n\r\n\r\n    constructor(\r\n        private _http: HttpClient,\r\n        private _router: Router) {\r\n    }\r\n\r\n    Login(login: Login): Observable<RespuestaApi> {\r\n        let body = JSON.stringify(login);\r\n        const url = `${this.url}user`;\r\n        return this._http.post<RespuestaApi>(url, body)\r\n    }\r\n\r\n    formsInfo(){\r\n        const url = `${this.url}formConfig`;\r\n        return this._http.get<FormConfig>(url)\r\n    }\r\n\r\n    createUser(newUser: ClientEntity){\r\n        let body = JSON.stringify(newUser);\r\n        const url = `${this.url}create`;\r\n        return this._http.post<UserCreationResponse>(url, body)\r\n    }\r\n\r\n    updateUser(User: ClientUpdate){\r\n        let body = JSON.stringify(User);\r\n        const url = `${this.url}update`;\r\n        return this._http.post<ClientUpdate>(url, body)\r\n    }\r\n\r\n    cerrarSesion()\r\n    {\r\n        localStorage.removeItem(this.configSession);\r\n        localStorage.removeItem(this.configForms);\r\n        return of(true);\r\n    }\r\n\r\n    set session(auth: RespuestaApi) {\r\n        localStorage.setItem(this.configSession, JSON.stringify(auth));\r\n    }\r\n    \r\n    set FormsData(data: FormConfig) {\r\n        localStorage.setItem(this.configForms, JSON.stringify(data));\r\n    }\r\n\r\n    get FormsData(): FormConfig{\r\n        const formsJson = localStorage.getItem(this.configForms);\r\n        const session: FormConfig = formsJson !== null ? JSON.parse(formsJson) : null;\r\n        return session;\r\n\r\n    }\r\n\r\n    get session(): RespuestaApi {\r\n        if (localStorage.getItem(this.configSession) === null) {\r\n            this._router.navigate(['']);\r\n        }\r\n        const sessionJson = localStorage.getItem(this.configSession);\r\n        const session: RespuestaApi = sessionJson !== null ? JSON.parse(sessionJson) : null;\r\n        return session;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}