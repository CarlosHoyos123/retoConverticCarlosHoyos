{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthServicio {\n  constructor(_http) {\n    this._http = _http;\n    this._authenticated = false;\n    this.url = 'Auth/';\n    /** Propiedad configuración */\n    this.configSession = 'Usuario';\n  }\n  Login(login) {\n    let body = JSON.stringify(login);\n    const url = `${this.url}user`;\n    return this._http.post(url, body).pipe(switchMap(response => {\n      if (response.state) {\n        this.session = response; // Asigna información del token\n        this._authenticated = true; // Indica que usuario es autenticado\n      }\n\n      return of(response); // Return a new observable with the response\n    }));\n  }\n\n  set session(auth) {\n    localStorage.setItem(this.configSession, JSON.stringify(auth));\n  }\n  get session() {\n    if (localStorage.getItem(this.configSession) === undefined) {\n      //cerrar\n    }\n    const sessionJson = localStorage.getItem(this.configSession);\n    const session = sessionJson !== null ? JSON.parse(sessionJson) : null;\n    return session;\n  }\n}\nAuthServicio.ɵfac = function AuthServicio_Factory(t) {\n  return new (t || AuthServicio)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthServicio.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthServicio,\n  factory: AuthServicio.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,EAAEC,SAAS,QAAQ,MAAM;;;AAWhD,OAAM,MAAOC,YAAY;EAUrBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IARjB,mBAAc,GAAY,KAAK;IAE/B,QAAG,GAAW,OAAO;IAE7B;IACQ,kBAAa,GAAW,SAAS;EAIzC;EAEAC,KAAK,CAACC,KAAY;IAEd,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;IAChC,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACA,GAAG,MAAM;IAE7B,OAAO,IAAI,CAACN,KAAK,CAACO,IAAI,CAAeD,GAAG,EAAEH,IAAI,CAAC,CAC1CK,IAAI,CACDX,SAAS,CAAEY,QAAsB,IAAI;MACjC,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAChB,IAAI,CAACC,OAAO,GAAGF,QAAQ,CAAC,CAAE;QAC1B,IAAI,CAACG,cAAc,GAAG,IAAI,CAAC,CAAK;;;MAEpC,OAAOhB,EAAE,CAACa,QAAQ,CAAC,CAAC,CAAgB;IACxC,CAAC,CAAC,CACL;EACT;;EAEA,IAAIE,OAAO,CAACE,IAAkB;IAC1BC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,aAAa,EAAEZ,IAAI,CAACC,SAAS,CAACQ,IAAI,CAAC,CAAC;EAClE;EAEA,IAAIF,OAAO;IACP,IAAIG,YAAY,CAACG,OAAO,CAAC,IAAI,CAACD,aAAa,CAAC,KAAKE,SAAS,EAAE;MACxD;IAAA;IAEJ,MAAMC,WAAW,GAAGL,YAAY,CAACG,OAAO,CAAC,IAAI,CAACD,aAAa,CAAC;IAC5D,MAAML,OAAO,GAAiBQ,WAAW,KAAK,IAAI,GAAGf,IAAI,CAACgB,KAAK,CAACD,WAAW,CAAC,GAAG,IAAI;IACnF,OAAOR,OAAO;EAClB;;AAzCSb,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAuB,SAAZvB,YAAY;EAAAwB,YAHT;AAAM","names":["of","switchMap","AuthServicio","constructor","_http","Login","login","body","JSON","stringify","url","post","pipe","response","state","session","_authenticated","auth","localStorage","setItem","configSession","getItem","undefined","sessionJson","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\chrod\\OneDrive\\Documentos\\Repositorios\\FrontEcommerce\\src\\app\\servicios\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\n\r\n/** Interfaces */\r\nimport { Login } from '../interface/login';\r\nimport { RespuestaApi } from '../interface/respuestaapi';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class AuthServicio {\r\n\r\n    private _authenticated: boolean = false;\r\n\r\n    private url: string = 'Auth/';\r\n\r\n    /** Propiedad configuración */\r\n    private configSession: string = 'Usuario';\r\n\r\n\r\n    constructor(private _http: HttpClient) {\r\n    }\r\n\r\n    Login(login: Login): Observable<any> {\r\n\r\n        let body = JSON.stringify(login);\r\n        const url = `${this.url}user`;\r\n\r\n        return this._http.post<RespuestaApi>(url, body)\r\n            .pipe(\r\n                switchMap((response: RespuestaApi) => {\r\n                    if (response.state) {\r\n                        this.session = response;  // Asigna información del token\r\n                        this._authenticated = true;     // Indica que usuario es autenticado\r\n                    }\r\n                    return of(response);                // Return a new observable with the response\r\n                })\r\n            );\r\n    }\r\n\r\n    set session(auth: RespuestaApi) {\r\n        localStorage.setItem(this.configSession, JSON.stringify(auth));\r\n    }\r\n\r\n    get session(): RespuestaApi {\r\n        if (localStorage.getItem(this.configSession) === undefined) {\r\n            //cerrar\r\n        }\r\n        const sessionJson = localStorage.getItem(this.configSession);\r\n        const session: RespuestaApi = sessionJson !== null ? JSON.parse(sessionJson) : null;\r\n        return session;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}